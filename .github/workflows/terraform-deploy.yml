name: Terraform Deploy

on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Terraform action to perform'
        required: true
        type: choice
        options:
          - plan
          - apply
          - destroy
      allowed_ssh_ip:
        description: 'Your public IP in CIDR notation (e.g., 203.0.113.45/32)'
        required: true
        type: string

env:
  TF_VERSION: '1.6.0'
  WORKING_DIR: './terraform'

jobs:
  terraform:
    name: Terraform ${{ github.event.inputs.action }}
    runs-on: ubuntu-latest
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: |
            {
              "clientId": "${{ secrets.AZURE_CLIENT_ID }}",
              "clientSecret": "${{ secrets.AZURE_CLIENT_SECRET }}",
              "subscriptionId": "${{ secrets.AZURE_SUBSCRIPTION_ID }}",
              "tenantId": "${{ secrets.AZURE_TENANT_ID }}"
            }

      - name: Terraform Init
        run: |
          cd ${{ env.WORKING_DIR }}
          terraform init

      - name: Terraform Format Check
        run: |
          cd ${{ env.WORKING_DIR }}
          terraform fmt -check
        continue-on-error: true

      - name: Terraform Validate
        run: |
          cd ${{ env.WORKING_DIR }}
          terraform validate

      - name: Terraform Plan
        if: github.event.inputs.action == 'plan' || github.event.inputs.action == 'apply'
        run: |
          cd ${{ env.WORKING_DIR }}
          terraform plan \
            -var="allowed_ssh_ip=${{ github.event.inputs.allowed_ssh_ip }}" \
            -out=tfplan
        env:
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}

      - name: Terraform Apply
        if: github.event.inputs.action == 'apply'
        run: |
          cd ${{ env.WORKING_DIR }}
          terraform apply -auto-approve tfplan
        env:
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}

      - name: Terraform Destroy
        if: github.event.inputs.action == 'destroy'
        run: |
          cd ${{ env.WORKING_DIR }}
          terraform destroy \
            -var="allowed_ssh_ip=${{ github.event.inputs.allowed_ssh_ip }}" \
            -auto-approve
        env:
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}

      - name: Output Summary
        if: github.event.inputs.action == 'apply'
        run: |
          cd ${{ env.WORKING_DIR }}
          echo "## Deployment Complete! ðŸŽ‰" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          terraform output deployment_complete_message >> $GITHUB_STEP_SUMMARY